                /*
                GraphNode * temp = &x;
                GraphNode * newNode = new GraphNode(friend2, NULL);
                //cout << "tmepe " << temp << " next " << temp->nextNode << endl; 
                while(temp && temp->nextNode != NULL){ 
                    //cout << "22 " << temp->mName << endl;  
                    temp = temp->nextNode;
                }
                
                if(temp->nextNode == NULL){
                    //cout <<"no friend for " << temp->mName << "\n";
                    temp->nextNode = newNode;
                    //cout << "ads " << temp->nextNode << endl; 
                } 
                //cout << "5 added " << newNode->mName << " to " << temp->mName << "'s list" << endl;
                */
                                /*
                if(x.nextNode == NULL){
                    x.nextNode = new GraphNode(friend1);
                    //cout << "3 added " << friend1 << " to " << friend2 << "'s list" << endl;
                }
                else{
                    while(x.nextNode != NULL){
                        x.nextNode = x.nextNode->nextNode;          
                    }
                    x.nextNode = new GraphNode(friend1);
                    //cout << "4 added " << friend1 << " to " << friend2 << "'s list" << endl;
                
                } 
                */ 
                bool Graph::searchFriendship(string friend1, string friend2){

    //if(searchPerson(friend1)){}
    for(auto& x : graphVec){
       
        if(x.mName == friend1){
            GraphNode * temp = &x; 
            while(x.nextNode != NULL){
                
                if(x.nextNode->mName == friend2){
                    return true;
                }
                else{ 
                    x.nextNode = x.nextNode->nextNode;
                }
            }
        }
        //repeat the same process if friend2 is found first in the vector
        else if(x.mName == friend2){
            while(x.nextNode != NULL){
                if(x.nextNode->mName == friend1){
                    return true;
                }
                else{ 
                    x.nextNode = x.nextNode->nextNode;
                }
            }            
        }

    }
    return false;
}
